// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// unnamed API: Application Controllers
//
// Command:
// $ goagen
// --design=github.com/m0a/goagooglelogin/example/design
// --out=$(GOPATH)/src/github.com/m0a/goagooglelogin/example
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// JWTController is the controller interface for the JWT actions.
type JWTController interface {
	goa.Muxer
	Secure(*SecureJWTContext) error
	Unsecure(*UnsecureJWTContext) error
}

// MountJWTController "mounts" a JWT resource controller on the given service.
func MountJWTController(service *goa.Service, ctrl JWTController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSecureJWTContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Secure(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	service.Mux.Handle("GET", "/jwt", ctrl.MuxHandler("secure", h, nil))
	service.LogInfo("mount", "ctrl", "JWT", "action", "Secure", "route", "GET /jwt", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUnsecureJWTContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Unsecure(rctx)
	}
	service.Mux.Handle("GET", "/jwt/unsecure", ctrl.MuxHandler("unsecure", h, nil))
	service.LogInfo("mount", "ctrl", "JWT", "action", "Unsecure", "route", "GET /jwt/unsecure")
}

// ServeController is the controller interface for the Serve actions.
type ServeController interface {
	goa.Muxer
	goa.FileServer
}

// MountServeController "mounts" a Serve resource controller on the given service.
func MountServeController(service *goa.Service, ctrl ServeController) {
	initService(service)
	var h goa.Handler

	h = ctrl.FileHandler("/static/*filepath", "./static")
	service.Mux.Handle("GET", "/static/*filepath", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Serve", "files", "./static", "route", "GET /static/*filepath")

	h = ctrl.FileHandler("/", "./static/index.html")
	service.Mux.Handle("GET", "/", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Serve", "files", "./static/index.html", "route", "GET /")

	h = ctrl.FileHandler("/static/", "static/index.html")
	service.Mux.Handle("GET", "/static/", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Serve", "files", "static/index.html", "route", "GET /static/")
}

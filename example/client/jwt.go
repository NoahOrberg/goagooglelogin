// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// unnamed API: jwt Resource Client
//
// Command:
// $ goagen
// --design=github.com/m0a/goagooglelogin/example/design
// --out=$(GOPATH)/src/github.com/m0a/goagooglelogin/example
// --version=v1.2.0-dirty

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// SecureJWTPath computes a request path to the secure action of jwt.
func SecureJWTPath() string {

	return fmt.Sprintf("/jwt")
}

// This action is secured with the jwt scheme
func (c *Client) SecureJWT(ctx context.Context, path string, fail *bool) (*http.Response, error) {
	req, err := c.NewSecureJWTRequest(ctx, path, fail)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewSecureJWTRequest create the request corresponding to the secure action endpoint of the jwt resource.
func (c *Client) NewSecureJWTRequest(ctx context.Context, path string, fail *bool) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if fail != nil {
		tmp4 := strconv.FormatBool(*fail)
		values.Set("fail", tmp4)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// UnsecureJWTPath computes a request path to the unsecure action of jwt.
func UnsecureJWTPath() string {

	return fmt.Sprintf("/jwt/unsecure")
}

// This action does not require auth
func (c *Client) UnsecureJWT(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewUnsecureJWTRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUnsecureJWTRequest create the request corresponding to the unsecure action endpoint of the jwt resource.
func (c *Client) NewUnsecureJWTRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
